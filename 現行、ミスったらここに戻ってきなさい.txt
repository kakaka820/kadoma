現行、ミスったらここに戻ってきなさい

// src/utils/draw.ts
import { Card, Player } from './deck';
import { countJokers } from './joker';

/**
 * 次のセット開始時に使用するドロー関数。
 * 各プレイヤーに5枚ずつ配り、ジョーカーが含まれていたかを検知する。
 */
export function drawCardsForNextTurn(
  deck: Card[],
  players: Player[],
  createDeck: () => Card[],
  shuffleDeck: (deck: Card[]) => Card[],
  discardPile: Card[],
  reshuffleForced: boolean = false,
  allHandsEmpty: boolean = false
): {
  updatedPlayers: Player[],
  updatedDeck: Card[],
  drawStatus: 'normal' | 'warn',
  jokerDealt: boolean
} {
   // 使用中カード（捨て札＋手札）を除いて、新しい山札を構築
  const usedCards = [
    ...discardPile,
    ...players.flatMap(p => p.hand),
 ];
 let newDeck = deck.filter(card => !usedCards.some(used => used.suit === card.suit && used.rank === card.rank));

  const CARDS_PER_PLAYER = 5;
  const TOTAL_CARDS_NEEDED = CARDS_PER_PLAYER * players.length;

  // もし山札が15枚以下の場合
  if (newDeck.length <= TOTAL_CARDS_NEEDED) {
    const isMultipleOfThree = newDeck.length % 3 === 0;

    if (isMultipleOfThree) {
      // 均等配布してから、場のカードを混ぜて補充
      const tempPlayers = players.map(p => ({ ...p, hand: [] as Card[] }));
      for (let i = 0; i < newDeck.length; i++) {
        const card = newDeck[i];
        const playerIndex = i % players.length;
        tempPlayers[playerIndex].hand.push(card);
      }

      // 残りの枚数を埋めるために捨て札を使う
      const neededPerPlayer = CARDS_PER_PLAYER - tempPlayers[0].hand.length;
      const totalNeeded = neededPerPlayer * players.length;

      const refillDeck = shuffleDeck([...discardPile]);
      for (let i = 0; i < totalNeeded; i++) {
        const card = refillDeck.shift();
        if (!card) break;
        const playerIndex = i % players.length;
        tempPlayers[playerIndex].hand.push(card);
      }

      const jokerDealt = countJokers(tempPlayers.flatMap(p => p.hand)) > 0;

      return {
        updatedPlayers: tempPlayers,
        updatedDeck: refillDeck,
        drawStatus: 'normal',
        jokerDealt
      };
    } else {
      // すべてのカードを戻して山札を再構築
      const freshDeck = createDeck().filter(card =>
      !usedCards.some(used => used.suit === card.suit && used.rank === card.rank)
    );
    newDeck = shuffleDeck(freshDeck);
    }
  }

  // 通常通りの配布
  if (newDeck.length < TOTAL_CARDS_NEEDED) {
    console.warn('[draw.ts] 十分なカードがありません。空配布を返します');
    return {
      updatedPlayers: players,
      updatedDeck: newDeck,
      drawStatus: 'warn',
      jokerDealt: false
    };
  }

  const updatedPlayers = players.map(player => ({
    ...player,
    hand: [] as Card[]
  }));

  for (let i = 0; i < TOTAL_CARDS_NEEDED; i++) {
    const card = newDeck.shift();
    if (!card) break;
    const playerIndex = i % players.length;
    updatedPlayers[playerIndex].hand.push(card);
  }

  const allHands = updatedPlayers.flatMap(p => p.hand);
  const jokerDealt = countJokers(allHands) > 0;
  const drawStatus = newDeck.length < TOTAL_CARDS_NEEDED ? 'warn' : 'normal';

  return {
    updatedPlayers,
    updatedDeck: newDeck,
    drawStatus,
    jokerDealt
  };
}

/**
 * 1セット分（5枚×人数分）カードを配布する関数。
 * - 手札は完全に上書きされる
 * - 山札が足りなければ何もせず元の状態を返す
 * - ジョーカーが含まれていたかを判定して返す
 */
export function dealNewSet(
  deck: Card[],
  players: Player[]
): {
  updatedPlayers: Player[],
  updatedDeck: Card[],
  jokerDealt: boolean
} {
  const newDeck = [...deck];
  const CARDS_PER_PLAYER = 5;
  const TOTAL_CARDS_NEEDED = CARDS_PER_PLAYER * players.length;

  if (newDeck.length < TOTAL_CARDS_NEEDED) {
    console.warn('[dealNewSet] 山札が不足しているため配布できません');
    return {
      updatedPlayers: players,
      updatedDeck: newDeck,
      jokerDealt: false
    };
  }

  const updatedPlayers = players.map(p => ({ ...p, hand: [] as Card[] }));

  for (let i = 0; i < TOTAL_CARDS_NEEDED; i++) {
    const card = newDeck.shift();
    if (!card) break;
    const playerIndex = i % players.length;
    updatedPlayers[playerIndex].hand.push(card);
  }

  const jokerDealt = countJokers(updatedPlayers.flatMap(p => p.hand)) > 0;

  return {
    updatedPlayers,
    updatedDeck: newDeck,
    jokerDealt
  };
}
